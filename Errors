Traceback (most recent call last):
  File "distance.py", line 81, in <module>
    line_image = display_lines(lane_image, averaged_lines)
  File "distance.py", line 29, in display_lines
    cv2.line(line_image, (x1, y1), (x2, y2), (255, 0, 0), 10)
OverflowError: signed integer is greater than maximum


Traceback (most recent call last):
  File "edgepoint.py", line 97, in <module>
    averaged_lines = average_slope_intercept(lane_image, lines)
  File "edgepoint.py", line 41, in average_slope_intercept
    for line in lines:
TypeError: 'NoneType' object is not iterable

Traceback (most recent call last):
  File "edgepoint.py", line 104, in <module>
    contours, _ = cv2.findContours(edges_edge, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
ValueError: too many values to unpack (expected 2)

def display_lines(image, lines):
    line_image = np.zeros_like(image)
    if lines is not None:
        for line in lines:
            x1, y1, x2, y2 = line.reshape(4)
	     x1 = np.clip(x1,0,width-1)
	    y1 = np.clip(y1,0,width-1) 									
            x2 = np.clip(x2,0,width-1) 					
            y2 = np.clip(y2,0,width-1)						
	    cv2.line(line_image, (x1, y1), (x2, y2), (255, 0, 0))
    return line_image


separate.py:51: RankWarning: Polyfit may be poorly conditioned
  parameters = np.polyfit((x1, x2), (y1, y2), 1)
separate.py:51: RankWarning: Polyfit may be poorly conditioned
  parameters = np.polyfit((x1, x2), (y1, y2), 1)
[ INFO:0] Initialize OpenCL runtime...
Traceback (most recent call last):
  File "separate.py", line 101, in <module>
    right_line_image = display_lines(lane_image, averaged_right_line)
  File "separate.py", line 36, in display_lines
    cv2.line(line_image, (x1, y1), (x2, y2), (0, 0, 255), 10)
OverflowError: signed integer is greater than maximum


[ INFO:0] Initialize OpenCL runtime...
Traceback (most recent call last):
  File "separate.py", line 100, in <module>
    left_line_image = display_lines(lane_image, averaged_left_line)
  File "separate.py", line 36, in display_lines
    cv2.line(line_image, (x1, y1), (x2, y2), (0, 0, 255), 10)
OverflowError: signed integer is less than minimum

import numpy as np
import cv2

def display_lines(image, lines):
    line_image = np.zeros_like(image)
    if lines is not None:
        for line in lines:
            x1, y1, x2, y2 = line.reshape(4)
            # Ensure coordinates are within the valid image range before drawing
            if (0 <= x1 < image.shape[1] and 0 <= x2 < image.shape[1] and
                0 <= y1 < image.shape[0] and 0 <= y2 < image.shape[0]):
                cv2.line(line_image, (x1, y1), (x2, y2), (0, 0, 255), 10)
    return line_image

def average_slope_intercept(image, lines, left=True):
    fit = []
    for line in lines:
        x1, y1, x2, y2 = line.reshape(4)
        # Filter lines that are too short to avoid polyfit errors
        if np.hypot(x2 - x1, y2 - y1) > 5:  # minimum length threshold
            parameters = np.polyfit((x1, x2), (y1, y2), 1)
            slope = parameters[0]
            intercept = parameters[1]
            if (left and slope < 0) or (not left and slope > 0):
                fit.append((slope, intercept))

    if len(fit) > 0:
        fit_average = np.average(fit, axis=0)
        slope, intercept = fit_average
        # Ensure slope is within a realistic range to avoid extreme lines
        if -1000 < slope < 1000:
            return make_coordinates(image, fit_average)
    # Return a zero line if no valid line is found
    return np.array([0, 0, 0, 0])

def make_coordinates(image, line_parameters):
    slope, intercept = line_parameters
    y1 = image.shape[0]
    y2 = int(y1 * (3 / 5))
    try:
        x1 = int((y1 - intercept) / slope)
        x2 = int((y2 - intercept) / slope)
    except ZeroDivisionError:
        return np.array([0, 0, 0, 0])  # Return default if slope is zero
    
    # Clip values to ensure they are within image bounds and non-negative
    x1, y1 = np.clip([x1, y1], 0, image.shape[1] - 1)
    x2, y2 = np.clip([x2, y2], 0, image.shape[1] - 1)
    
    return np.array([x1, y1, x2, y2], dtype=int)
