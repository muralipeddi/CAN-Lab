import cv2
import numpy as np
import pyrealsense2 as rs  # Intel RealSense SDK
import matplotlib.pyplot as plt

# Configure Intel RealSense
pipeline = rs.pipeline()
config = rs.config()
config.enable_stream(rs.stream.color, 640, 480, rs.format.bgr8, 30)
config.enable_stream(rs.stream.depth, 640, 480, rs.format.z16, 30)
pipeline.start(config)

# Align depth frame to color frame
align = rs.align(rs.stream.color)

def region_of_interest(image):
    height = image.shape[0]
    polygons = np.array([
        [(0, height), (120, 350), (520, 350), (580, height)]
    ])
    mask = np.zeros_like(image)
    cv2.fillPoly(mask, polygons, 255)
    masked_image = cv2.bitwise_and(image, mask)
    return masked_image

def display_lines(image, lines):
    line_image = np.zeros_like(image)
    height, width = image.shape[:2]
    if lines is not None:
        for line in lines:
            x1, y1, x2, y2 = line.reshape(4)
            x1 = np.clip(x1, 0, width - 1)
            y1 = np.clip(y1, 0, height - 1)
            x2 = np.clip(x2, 0, width - 1)
            y2 = np.clip(y2, 0, height - 1)
            cv2.line(line_image, (x1, y1), (x2, y2), (255, 0, 0), 5)
    return line_image

def make_coordinates(image, line_parameters):
    slope, intercept = line_parameters
    y1 = image.shape[0]
    y2 = int(y1 * (4 / 5))
    x1 = int((y1 - intercept) / slope)
    x2 = int((y2 - intercept) / slope)
    return np.array([x1, y1, x2, y2])

def average_slope_intercept(image, lines):
    left_fit = []
    right_fit = []
    for line in lines:
        x1, y1, x2, y2 = line.reshape(4)
        parameters = np.polyfit((x1, x2), (y1, y2), 1)
        slope = parameters[0]
        intercept = parameters[1]
        if slope < 0:
            left_fit.append((slope, intercept))
        else:
            right_fit.append((slope, intercept))
    
    left_line = make_coordinates(image, np.average(left_fit, axis=0)) if left_fit else np.array([0, 0, 0, 0])
    right_line = make_coordinates(image, np.average(right_fit, axis=0)) if right_fit else np.array([0, 0, 0, 0])

    return np.array([left_line, right_line])

def find_longest_horizontal_line(contours, left_line, right_line):
    longest_line = None
    max_length = 0

    for contour in contours:
        epsilon = 0.001 * cv2.arcLength(contour, True)
        approx = cv2.approxPolyDP(contour, epsilon, True)

        for i in range(len(approx) - 1):
            x1, y1 = approx[i][0]
            x2, y2 = approx[i + 1][0]

            # Check if line is horizontal and within lane bounds
            if abs(y1 - y2) < 60:
                length = np.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
                if length > max_length and (left_line[0] < x1 < right_line[0] and left_line[2] < x2 < right_line[2]):
                    max_length = length
                    longest_line = [(x1, y1), (x2, y2)]
                    
    return longest_line

try:
    while True:
        # Capture frame-by-frame
        frames = pipeline.wait_for_frames()
        aligned_frames = align.process(frames)
        color_frame = aligned_frames.get_color_frame()
        depth_frame = aligned_frames.get_depth_frame()
        
        if not color_frame or not depth_frame:
            continue

        # Convert color image to numpy array
        frame = np.asanyarray(color_frame.get_data())
        lane_image = np.copy(frame)
        
        # Grayscale and Canny edge detection
        gray = cv2.cvtColor(lane_image, cv2.COLOR_BGR2GRAY)
        blur = cv2.GaussianBlur(gray, (5, 5), 0)
        canny = cv2.Canny(blur, 50, 100)
        
        # Region of Interest
        cropped_image = region_of_interest(canny)
        
        # Hough Lines and averaging
        lines = cv2.HoughLinesP(cropped_image, 2, np.pi / 180, 100, np.array([]), minLineLength=5, maxLineGap=70)
        if lines is not None:
           averaged_lines = average_slope_intercept(lane_image, lines)
           line_image = display_lines(lane_image, averaged_lines)
        else:
           averaged_lines = np.array([[0, 0, 0, 0], [0, 0, 0, 0]])
           line_image = np.zeros_like(lane_image)
        
        # Contours for edge detection
        kernel_edge = np.ones((5, 5), np.uint8)
        edges_edge = cv2.dilate(cropped_image, kernel_edge, iterations=3)
        contours, _ = cv2.findContours(edges_edge, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
        
        # Find the longest horizontal line within the lane boundaries
        longest_horizontal_line = find_longest_horizontal_line(contours, averaged_lines[0], averaged_lines[1])

        # Mark and measure distance of detected edge points within lanes
        if longest_horizontal_line:
            (x1, y1), (x2, y2) = longest_horizontal_line
            # Get depth at these points
            dist1 = depth_frame.get_distance(x1, y1)
            dist2 = depth_frame.get_distance(x2, y2)
            
            # Draw circles at detected points
            cv2.circle(lane_image, (x1, y1), 10, (0, 255, 0), -1)
            cv2.circle(lane_image, (x2, y2), 10, (0, 255, 0), -1)
            print(f"Edge points within lanes: ({x1}, {y1}) at {dist1:.2f} meters and ({x2}, {y2}) at {dist2:.2f} meters")
        else:
            print("No horizontal line detected within lane boundaries.")

        # Overlay lane and edge lines on the original frame
        combo_image = cv2.addWeighted(lane_image, 0.8, line_image, 1, 1)
        cv2.imshow("Lane Detection and Edge Points", combo_image)

        # Break the loop on 'q' key press
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

finally:
    pipeline.stop()
    cv2.destroyAllWindows()
